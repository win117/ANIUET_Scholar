import { useState, useRef, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "./ui/card";
import { Button } from "./ui/button";
import { Input } from "./ui/input";
import { Badge } from "./ui/badge";
import { ScrollArea } from "./ui/scroll-area";
import { motion } from "motion/react";
import { DynamicBackground } from "./DynamicBackground";
import { 
  ArrowLeft, 
  Send, 
  Bot, 
  User, 
  Lightbulb, 
  FileText, 
  HelpCircle, 
  Sparkles,
  Copy,
  Download,
  RefreshCw,
  BookOpen,
  Puzzle,
  BarChart,
  Zap
} from "lucide-react";
import logo from 'figma:asset/2b2a7f5a35cc2954a161c6344ab960a250a1a60d.png';

interface AIAssistantPageProps {
  onBack: () => void;
}

interface Message {
  id: string;
  type: 'user' | 'assistant';
  content: string;
  timestamp: Date;
  suggestions?: string[];
}

const quickPrompts = [
  {
    icon: FileText,
    title: "Crear Quiz",
    prompt: "Crea un quiz sobre Machine Learning b√°sico con 5 preguntas de opci√≥n m√∫ltiple",
    category: "Evaluaci√≥n"
  },
  {
    icon: BookOpen,
    title: "Material Educativo",
    prompt: "Genera material educativo sobre redes neuronales para estudiantes principiantes",
    category: "Contenido"
  },
  {
    icon: Puzzle,
    title: "Ejercicio Pr√°ctico",
    prompt: "Dise√±a un ejercicio pr√°ctico de programaci√≥n para ense√±ar clasificaci√≥n de im√°genes",
    category: "Pr√°ctica"
  },
  {
    icon: BarChart,
    title: "R√∫brica de Evaluaci√≥n",
    prompt: "Crea una r√∫brica para evaluar proyectos de IA con criterios claros y escalas de puntuaci√≥n",
    category: "Evaluaci√≥n"
  },
  {
    icon: Lightbulb,
    title: "Ideas de Proyecto",
    prompt: "Sugiere 3 ideas de proyectos finales para un curso de introducci√≥n a la IA",
    category: "Proyectos"
  },
  {
    icon: HelpCircle,
    title: "Resolver Dudas",
    prompt: "Explica de manera simple qu√© es el overfitting en machine learning y c√≥mo evitarlo",
    category: "Conceptos"
  }
];

const mockResponses: Record<string, string> = {
  "quiz": `# Quiz: Machine Learning B√°sico

## Pregunta 1
¬øCu√°l es la principal diferencia entre aprendizaje supervisado y no supervisado?

a) El aprendizaje supervisado usa m√°s datos
b) El aprendizaje supervisado tiene etiquetas en los datos de entrenamiento
c) El aprendizaje no supervisado es m√°s r√°pido
d) No hay diferencias significativas

**Respuesta correcta: b)**

## Pregunta 2
¬øQu√© algoritmo es m√°s adecuado para problemas de clasificaci√≥n binaria?

a) K-means
b) Regresi√≥n log√≠stica
c) PCA
d) DBSCAN

**Respuesta correcta: b)**

## Pregunta 3
¬øQu√© significa "overfitting" en machine learning?

a) El modelo es muy simple
b) El modelo memoriza los datos de entrenamiento pero no generaliza bien
c) El modelo no tiene suficientes datos
d) El modelo es muy r√°pido

**Respuesta correcta: b)**

## Pregunta 4
¬øCu√°l es el prop√≥sito de dividir los datos en conjuntos de entrenamiento y prueba?

a) Para acelerar el entrenamiento
b) Para evaluar el rendimiento del modelo en datos no vistos
c) Para reducir el tama√±o de los datos
d) Para mejorar la precisi√≥n

**Respuesta correcta: b)**

## Pregunta 5
¬øQu√© m√©trica es m√°s apropiada para evaluar un modelo de clasificaci√≥n desbalanceada?

a) Exactitud (Accuracy)
b) F1-Score
c) Tiempo de ejecuci√≥n
d) N√∫mero de par√°metros

**Respuesta correcta: b)**`,

  "material": `# Material Educativo: Redes Neuronales para Principiantes

## üß† ¬øQu√© son las Redes Neuronales?

Las redes neuronales artificiales son sistemas computacionales inspirados en el funcionamiento del cerebro humano. Est√°n compuestas por nodos (neuronas artificiales) interconectados que procesan informaci√≥n.

### Conceptos Clave:

**1. Neurona Artificial**
- Unidad b√°sica de procesamiento
- Recibe m√∫ltiples entradas
- Produce una salida basada en una funci√≥n de activaci√≥n

**2. Capas**
- **Capa de entrada**: Recibe los datos iniciales
- **Capas ocultas**: Procesan la informaci√≥n
- **Capa de salida**: Produce el resultado final

**3. Pesos y Sesgos**
- **Pesos**: Determinan la importancia de cada conexi√≥n
- **Sesgos**: Permiten ajustar la funci√≥n de activaci√≥n

## üí° Analog√≠a Simple
Imagina una red neuronal como una f√°brica:
- Los datos de entrada son las materias primas
- Cada capa es una estaci√≥n de trabajo
- Los pesos son las instrucciones de cada estaci√≥n
- El producto final es la predicci√≥n

## üîÑ Proceso de Aprendizaje
1. **Alimentaci√≥n hacia adelante**: Los datos fluyen desde la entrada hasta la salida
2. **C√°lculo del error**: Se compara la predicci√≥n con el resultado esperado
3. **Retropropagaci√≥n**: Se ajustan los pesos para reducir el error
4. **Repetici√≥n**: Este proceso se repite miles de veces

## üìä Aplicaciones Pr√°cticas
- Reconocimiento de im√°genes
- Procesamiento de lenguaje natural
- Sistemas de recomendaci√≥n
- Diagn√≥stico m√©dico
- Veh√≠culos aut√≥nomos`,

  "ejercicio": `# Ejercicio Pr√°ctico: Clasificaci√≥n de Im√°genes

## üéØ Objetivo
Los estudiantes aprender√°n a construir un clasificador de im√°genes b√°sico usando Python y bibliotecas de machine learning.

## üìã Materiales Necesarios
- Python 3.7+
- Jupyter Notebook
- Bibliotecas: scikit-learn, matplotlib, numpy
- Dataset: CIFAR-10 (incluido en scikit-learn)

## üë®‚Äçüíª C√≥digo Base

\`\`\`python
# Importar bibliotecas necesarias
import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import fetch_openml
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

# Paso 1: Cargar datos
print("Cargando dataset...")
# Los estudiantes completar√°n esta secci√≥n

# Paso 2: Explorar los datos
def explorar_datos(X, y):
    print(f"Forma de X: {X.shape}")
    print(f"Forma de y: {y.shape}")
    print(f"Clases √∫nicas: {np.unique(y)}")
    
    # Mostrar algunas im√°genes
    fig, axes = plt.subplots(2, 5, figsize=(12, 6))
    for i, ax in enumerate(axes.flat):
        # Los estudiantes completar√°n esta visualizaci√≥n
        pass

# Paso 3: Preparar datos
def preparar_datos(X, y):
    # Normalizar p√≠xeles (0-255 a 0-1)
    X_norm = X / 255.0
    
    # Dividir en entrenamiento y prueba
    return train_test_split(X_norm, y, test_size=0.2, random_state=42)

# Paso 4: Entrenar modelo
def entrenar_modelo(X_train, y_train):
    modelo = RandomForestClassifier(n_estimators=100, random_state=42)
    # Los estudiantes implementar√°n el entrenamiento
    return modelo

# Paso 5: Evaluar modelo
def evaluar_modelo(modelo, X_test, y_test):
    # Los estudiantes implementar√°n la evaluaci√≥n
    pass
\`\`\`

## üìù Tareas para los Estudiantes

### Nivel Principiante:
1. Completar la carga de datos
2. Implementar la visualizaci√≥n de im√°genes
3. Entrenar el modelo b√°sico

### Nivel Intermedio:
4. Experimentar con diferentes hiperpar√°metros
5. Probar otros algoritmos (SVM, KNN)
6. Calcular m√©tricas adicionales (precisi√≥n, recall, F1-score)

### Nivel Avanzado:
7. Implementar validaci√≥n cruzada
8. Crear una matriz de confusi√≥n
9. Optimizar hiperpar√°metros con GridSearch

## üèÜ Criterios de Evaluaci√≥n
- **C√≥digo funcional (40%)**
- **An√°lisis de resultados (30%)**
- **Creatividad en mejoras (20%)**
- **Documentaci√≥n y comentarios (10%)**

## üí° Extensiones Posibles
- Usar redes neuronales convolucionales
- Implementar data augmentation
- Comparar con modelos pre-entrenados
- Crear una interfaz web para predicciones`,

  "rubrica": `# R√∫brica de Evaluaci√≥n: Proyectos de IA

## üìä Criterios de Evaluaci√≥n (Total: 100 puntos)

### 1. Comprensi√≥n Te√≥rica (25 puntos)

**Excelente (23-25 puntos)**
- Demuestra comprensi√≥n profunda de conceptos de IA
- Explica claramente la teor√≠a detr√°s del enfoque elegido
- Relaciona conceptos te√≥ricos con la implementaci√≥n pr√°ctica

**Bueno (18-22 puntos)**
- Comprende la mayor√≠a de conceptos relevantes
- Explica la teor√≠a con claridad, pero puede faltar profundidad
- Hace algunas conexiones entre teor√≠a y pr√°ctica

**Satisfactorio (13-17 puntos)**
- Comprensi√≥n b√°sica de conceptos principales
- Explicaciones simples pero correctas
- Conexiones limitadas entre teor√≠a y pr√°ctica

**Necesita Mejora (0-12 puntos)**
- Comprensi√≥n superficial o incorrecta
- Explicaciones confusas o incompletas
- No relaciona teor√≠a con pr√°ctica

### 2. Implementaci√≥n T√©cnica (30 puntos)

**Excelente (27-30 puntos)**
- C√≥digo limpio, bien estructurado y documentado
- Implementaci√≥n correcta y eficiente
- Manejo adecuado de errores y casos edge

**Bueno (21-26 puntos)**
- C√≥digo funcional con buena estructura
- Implementaci√≥n mayormente correcta
- Documentaci√≥n b√°sica pero suficiente

**Satisfactorio (15-20 puntos)**
- C√≥digo funciona pero puede ser desordenado
- Implementaci√≥n b√°sica correcta
- Documentaci√≥n m√≠nima

**Necesita Mejora (0-14 puntos)**
- C√≥digo no funciona o tiene errores significativos
- Implementaci√≥n incorrecta o incompleta
- Sin documentaci√≥n

### 3. Metodolog√≠a y Experimentaci√≥n (20 puntos)

**Excelente (18-20 puntos)**
- Dise√±o experimental riguroso
- Validaci√≥n apropiada del modelo
- An√°lisis sistem√°tico de resultados

**Bueno (14-17 puntos)**
- Metodolog√≠a s√≥lida con validaci√≥n b√°sica
- An√°lisis de resultados competente
- Algunos experimentos adicionales

**Satisfactorio (10-13 puntos)**
- Metodolog√≠a b√°sica pero apropiada
- Validaci√≥n simple del modelo
- An√°lisis superficial de resultados

**Necesita Mejora (0-9 puntos)**
- Sin metodolog√≠a clara
- Sin validaci√≥n adecuada
- An√°lisis inadecuado o incorrecto

### 4. An√°lisis de Resultados (15 puntos)

**Excelente (14-15 puntos)**
- Interpretaci√≥n profunda y precisa de resultados
- Identifica limitaciones y posibles mejoras
- Contextualiza resultados apropiadamente

**Bueno (11-13 puntos)**
- Interpretaci√≥n correcta de resultados principales
- Algunas observaciones sobre limitaciones
- Contexto b√°sico apropiado

**Satisfactorio (8-10 puntos)**
- Interpretaci√≥n b√°sica correcta
- Observaciones superficiales
- Contexto limitado

**Necesita Mejora (0-7 puntos)**
- Interpretaci√≥n incorrecta o ausente
- No identifica limitaciones
- Sin contexto

### 5. Presentaci√≥n y Comunicaci√≥n (10 puntos)

**Excelente (9-10 puntos)**
- Presentaci√≥n clara, profesional y bien organizada
- Comunicaci√≥n efectiva de ideas complejas
- Uso apropiado de visualizaciones

**Bueno (7-8 puntos)**
- Presentaci√≥n organizada y clara
- Comunicaci√≥n competente
- Visualizaciones b√°sicas apropiadas

**Satisfactorio (5-6 puntos)**
- Presentaci√≥n b√°sica pero comprensible
- Comunicaci√≥n simple pero efectiva
- Pocas visualizaciones

**Necesita Mejora (0-4 puntos)**
- Presentaci√≥n desorganizada o confusa
- Comunicaci√≥n deficiente
- Sin visualizaciones o inapropiadas

## üéØ Escala de Calificaciones

- **90-100 puntos**: A (Excelente)
- **80-89 puntos**: B (Bueno)
- **70-79 puntos**: C (Satisfactorio)
- **60-69 puntos**: D (Necesita Mejora)
- **<60 puntos**: F (Insuficiente)

## üìù Comentarios Adicionales
- Se valorar√° la originalidad y creatividad
- La colaboraci√≥n efectiva en equipos ser√° considerada
- Se dar√° cr√©dito por intentos bien fundamentados aunque no sean completamente exitosos`
};

export function AIAssistantPage({ onBack }: AIAssistantPageProps) {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      type: 'assistant',
      content: '¬°Hola! Soy tu asistente de IA para educaci√≥n. Puedo ayudarte a crear materiales educativos, resolver dudas sobre IA, dise√±ar evaluaciones y mucho m√°s. ¬øEn qu√© puedo ayudarte hoy?',
      timestamp: new Date(),
      suggestions: ["Crear un quiz", "Generar material educativo", "Dise√±ar un ejercicio pr√°ctico", "Explicar un concepto"]
    }
  ]);
  const [inputValue, setInputValue] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const scrollAreaRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  useEffect(() => {
    if (scrollAreaRef.current) {
      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight;
    }
  }, [messages]);

  const handleSendMessage = async (content: string = inputValue) => {
    if (!content.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: content.trim(),
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsTyping(true);

    // Simulate AI response
    setTimeout(() => {
      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: 'assistant',
        content: generateResponse(content.trim()),
        timestamp: new Date(),
        suggestions: generateSuggestions(content.trim())
      };

      setMessages(prev => [...prev, assistantMessage]);
      setIsTyping(false);
    }, 1500);
  };

  const generateResponse = (input: string): string => {
    const lowerInput = input.toLowerCase();
    
    if (lowerInput.includes('quiz') || lowerInput.includes('evaluaci√≥n') || lowerInput.includes('pregunta')) {
      return mockResponses.quiz;
    } else if (lowerInput.includes('material') || lowerInput.includes('contenido') || lowerInput.includes('neuronal')) {
      return mockResponses.material;
    } else if (lowerInput.includes('ejercicio') || lowerInput.includes('pr√°ctica') || lowerInput.includes('programaci√≥n')) {
      return mockResponses.ejercicio;
    } else if (lowerInput.includes('r√∫brica') || lowerInput.includes('evaluar') || lowerInput.includes('criterio')) {
      return mockResponses.rubrica;
    } else if (lowerInput.includes('proyecto') || lowerInput.includes('idea')) {
      return `# Ideas de Proyectos Finales para IA

## üöÄ Proyecto 1: Asistente Personal Inteligente
**Nivel:** Intermedio
**Duraci√≥n:** 4-6 semanas

Desarrollar un chatbot que pueda responder preguntas b√°sicas sobre un tema espec√≠fico (ej: salud, finanzas, educaci√≥n).

**Tecnolog√≠as:** Python, NLTK/spaCy, Flask
**Entregables:** Aplicaci√≥n web funcional, documentaci√≥n, presentaci√≥n

## üé® Proyecto 2: Clasificador de Arte
**Nivel:** Principiante-Intermedio  
**Duraci√≥n:** 3-4 semanas

Crear un sistema que clasifique obras de arte por estilo, √©poca o artista usando computer vision.

**Tecnolog√≠as:** Python, TensorFlow/PyTorch, OpenCV
**Entregables:** Modelo entrenado, interfaz de usuario, an√°lisis de resultados

## üìä Proyecto 3: Predictor de Tendencias
**Nivel:** Avanzado
**Duraci√≥n:** 6-8 semanas

Desarrollar un sistema que analice datos de redes sociales para predecir tendencias en un campo espec√≠fico.

**Tecnolog√≠as:** Python, APIs de redes sociales, Machine Learning
**Entregables:** Dashboard interactivo, modelo predictivo, informe de insights`;
    } else if (lowerInput.includes('overfitting') || lowerInput.includes('sobreajuste')) {
      return `# Overfitting en Machine Learning üß†

## ¬øQu√© es el Overfitting?

El **overfitting** (sobreajuste) ocurre cuando un modelo aprende demasiado bien los datos de entrenamiento, incluyendo el ruido y las peculiaridades espec√≠ficas, pero falla al generalizar a datos nuevos.

## üéØ Analog√≠a Simple
Imagina un estudiante que memoriza todas las respuestas de ex√°menes pasados sin entender los conceptos. Puede obtener 100% en esos ex√°menes espec√≠ficos, pero falla con preguntas nuevas.

## üîç Se√±ales de Overfitting
- **Alta precisi√≥n en entrenamiento, baja en validaci√≥n**
- **Diferencia creciente entre m√©tricas de entrenamiento y validaci√≥n**
- **Modelo muy complejo para la cantidad de datos disponibles**

## üõ°Ô∏è C√≥mo Evitarlo

### 1. M√°s Datos
- Recopilar m√°s ejemplos de entrenamiento
- Data augmentation (para im√°genes)

### 2. Regularizaci√≥n
- **L1/L2 Regularization**: Penaliza pesos grandes
- **Dropout**: Apaga neuronas aleatoriamente
- **Early Stopping**: Para el entrenamiento cuando la validaci√≥n empeora

### 3. Simplificar el Modelo
- Reducir n√∫mero de par√°metros
- Usar arquitecturas m√°s simples
- Feature selection

### 4. Validaci√≥n Cruzada
- K-fold cross-validation
- Holdout validation
- Time series split (para datos temporales)

## üìä Ejemplo Pr√°ctico
\`\`\`python
# Detectar overfitting
train_scores = []
val_scores = []

for epoch in range(epochs):
    # Entrenar
    model.train()
    train_loss = train_one_epoch()
    
    # Validar
    model.eval()
    val_loss = validate()
    
    train_scores.append(train_loss)
    val_scores.append(val_loss)
    
    # Early stopping si la validaci√≥n empeora
    if val_loss > min(val_scores[:-1]):
        patience_counter += 1
        if patience_counter > patience:
            break
\`\`\``;
    }
    
    return `Gracias por tu pregunta. Como asistente de IA educativo, puedo ayudarte con:

üìö **Creaci√≥n de Contenido:**
- Dise√±ar quizzes y evaluaciones
- Generar material educativo estructurado
- Crear ejercicios pr√°cticos de programaci√≥n

üß† **Explicaciones de Conceptos:**
- Simplificar temas complejos de IA
- Proporcionar analog√≠as y ejemplos
- Resolver dudas espec√≠ficas

üéØ **Planificaci√≥n Educativa:**
- Dise√±ar r√∫bricas de evaluaci√≥n
- Sugerir ideas de proyectos
- Estructurar planes de lecci√≥n

¬øTe gustar√≠a que te ayude con algo espec√≠fico? Puedes usar los botones de sugerencias o escribir tu pregunta directamente.`;
  };

  const generateSuggestions = (input: string): string[] => {
    const lowerInput = input.toLowerCase();
    
    if (lowerInput.includes('quiz')) {
      return ["Crear otro quiz sobre deep learning", "Dise√±ar una r√∫brica para evaluar el quiz", "Explicar c√≥mo validar respuestas autom√°ticamente"];
    } else if (lowerInput.includes('material')) {
      return ["Crear ejercicios pr√°cticos sobre este tema", "Dise√±ar un quiz de evaluaci√≥n", "Sugerir recursos adicionales"];
    } else if (lowerInput.includes('ejercicio')) {
      return ["Crear variaciones del ejercicio", "Dise√±ar r√∫brica de evaluaci√≥n", "Sugerir extensiones avanzadas"];
    }
    
    return ["Crear material educativo", "Dise√±ar un quiz", "Explicar un concepto", "Sugerir ideas de proyecto"];
  };

  const handleQuickPrompt = (prompt: string) => {
    handleSendMessage(prompt);
  };

  const copyToClipboard = (content: string) => {
    navigator.clipboard.writeText(content);
    // You could add a toast notification here
  };

  return (
    <div className="min-h-screen relative flex">
      <DynamicBackground variant="ai-assistant" />
      
      {/* Header */}
      <div className="w-full">
        <header className="bg-white/90 backdrop-blur-md border-b p-4 relative z-10">
          <div className="flex items-center justify-between max-w-7xl mx-auto">
            <div className="flex items-center space-x-4">
              <Button onClick={onBack} variant="ghost" size="icon">
                <ArrowLeft className="w-5 h-5" />
              </Button>
              <img src={logo} alt="ANIUET Scholar" className="w-8 h-8" />
              <div>
                <h1 className="text-2xl font-bold text-purple-600">
                  ü§ñ Asistente IA para Maestros
                </h1>
                <p className="text-gray-600">Tu compa√±ero inteligente para crear contenido educativo</p>
              </div>
            </div>
            
            <div className="flex items-center space-x-3">
              <Badge className="bg-purple-100 text-purple-800">
                <Sparkles className="w-3 h-3 mr-1" />
                IA Activa
              </Badge>
              <Button variant="outline" size="sm">
                <RefreshCw className="w-4 h-4 mr-2" />
                Nueva Conversaci√≥n
              </Button>
            </div>
          </div>
        </header>

        <div className="flex h-[calc(100vh-80px)]">
          {/* Quick Prompts Sidebar */}
          <div className="w-80 bg-white/90 backdrop-blur-md border-r p-4 overflow-y-auto">
            <h3 className="font-semibold text-gray-900 mb-4">üöÄ Prompts R√°pidos</h3>
            <div className="space-y-3">
              {quickPrompts.map((prompt, index) => (
                <motion.div
                  key={index}
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                >
                  <Card 
                    className="cursor-pointer hover:shadow-md transition-shadow bg-white/80"
                    onClick={() => handleQuickPrompt(prompt.prompt)}
                  >
                    <CardContent className="p-4">
                      <div className="flex items-start space-x-3">
                        <div className="w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center">
                          <prompt.icon className="w-5 h-5 text-purple-600" />
                        </div>
                        <div className="flex-1">
                          <h4 className="font-medium text-sm text-gray-900 mb-1">{prompt.title}</h4>
                          <p className="text-xs text-gray-600 line-clamp-2">{prompt.prompt}</p>
                          <Badge variant="outline" className="mt-2 text-xs">
                            {prompt.category}
                          </Badge>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </motion.div>
              ))}
            </div>
          </div>

          {/* Chat Area */}
          <div className="flex-1 flex flex-col">
            {/* Messages */}
            <ScrollArea ref={scrollAreaRef} className="flex-1 p-6">
              <div className="max-w-4xl mx-auto space-y-6">
                {messages.map((message) => (
                  <motion.div
                    key={message.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
                  >
                    <div className={`flex space-x-3 max-w-3xl ${message.type === 'user' ? 'flex-row-reverse space-x-reverse' : ''}`}>
                      {/* Avatar */}
                      <div className={`w-10 h-10 rounded-full flex items-center justify-center ${
                        message.type === 'user' 
                          ? 'bg-blue-600 text-white' 
                          : 'bg-purple-600 text-white'
                      }`}>
                        {message.type === 'user' ? <User className="w-5 h-5" /> : <Bot className="w-5 h-5" />}
                      </div>

                      {/* Message Content */}
                      <div className={`rounded-2xl p-4 ${
                        message.type === 'user'
                          ? 'bg-blue-600 text-white'
                          : 'bg-white/90 backdrop-blur-sm border shadow-sm'
                      }`}>
                        <div className="prose prose-sm max-w-none">
                          {message.type === 'assistant' ? (
                            <div className="space-y-3">
                              <div className="whitespace-pre-wrap text-gray-800">{message.content}</div>
                              {message.content.length > 200 && (
                                <div className="flex space-x-2 pt-2 border-t">
                                  <Button 
                                    size="sm" 
                                    variant="outline"
                                    onClick={() => copyToClipboard(message.content)}
                                  >
                                    <Copy className="w-3 h-3 mr-1" />
                                    Copiar
                                  </Button>
                                  <Button size="sm" variant="outline">
                                    <Download className="w-3 h-3 mr-1" />
                                    Descargar
                                  </Button>
                                </div>
                              )}
                            </div>
                          ) : (
                            <div className="text-white">{message.content}</div>
                          )}
                        </div>

                        {/* Suggestions */}
                        {message.suggestions && message.suggestions.length > 0 && (
                          <div className="mt-4 pt-3 border-t border-gray-200">
                            <p className="text-sm text-gray-600 mb-2">üí° Sugerencias:</p>
                            <div className="flex flex-wrap gap-2">
                              {message.suggestions.map((suggestion, index) => (
                                <Button
                                  key={index}
                                  size="sm"
                                  variant="outline"
                                  onClick={() => handleSendMessage(suggestion)}
                                  className="text-xs"
                                >
                                  {suggestion}
                                </Button>
                              ))}
                            </div>
                          </div>
                        )}
                      </div>
                    </div>
                  </motion.div>
                ))}

                {/* Typing Indicator */}
                {isTyping && (
                  <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    className="flex justify-start"
                  >
                    <div className="flex space-x-3 max-w-3xl">
                      <div className="w-10 h-10 rounded-full bg-purple-600 text-white flex items-center justify-center">
                        <Bot className="w-5 h-5" />
                      </div>
                      <div className="bg-white/90 backdrop-blur-sm border shadow-sm rounded-2xl p-4">
                        <div className="flex space-x-1">
                          <div className="w-2 h-2 bg-gray-400 rounded-full animate-pulse"></div>
                          <div className="w-2 h-2 bg-gray-400 rounded-full animate-pulse" style={{ animationDelay: '0.2s' }}></div>
                          <div className="w-2 h-2 bg-gray-400 rounded-full animate-pulse" style={{ animationDelay: '0.4s' }}></div>
                        </div>
                      </div>
                    </div>
                  </motion.div>
                )}
              </div>
            </ScrollArea>

            {/* Input Area */}
            <div className="border-t bg-white/90 backdrop-blur-md p-4">
              <div className="max-w-4xl mx-auto">
                <div className="flex space-x-3">
                  <Input
                    ref={inputRef}
                    value={inputValue}
                    onChange={(e) => setInputValue(e.target.value)}
                    onKeyDown={(e) => e.key === 'Enter' && !e.shiftKey && handleSendMessage()}
                    placeholder="Escribe tu pregunta o solicitud aqu√≠... (ej: 'Crea un quiz sobre machine learning')"
                    className="flex-1"
                    disabled={isTyping}
                  />
                  <Button 
                    onClick={() => handleSendMessage()}
                    disabled={!inputValue.trim() || isTyping}
                    className="bg-purple-600 hover:bg-purple-700 text-white"
                  >
                    <Send className="w-4 h-4" />
                  </Button>
                </div>
                <p className="text-xs text-gray-500 mt-2 text-center">
                  üí° Tip: S√© espec√≠fico en tus solicitudes para obtener mejores resultados
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}